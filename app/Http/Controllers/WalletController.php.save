<?php

namespace App\Http\Controllers;

use App\Jobs\Transaction as JobsTransaction;
use App\Models\Balance;
use App\Models\Deposit;
use App\Models\Transaction;
use App\Models\User;
use App\Models\Withdraw;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Modules\Currencies\app\Models\Currency;

/**
 * WalletController
 *
 * This controller handles wallet management operations like getting balance,
 * adding/removing currencies, making deposits/withdrawals etc.
 */

class WalletController extends Controller
{
    /**
     * Get balance for authenticated user
     */
    public function balance()
    {
        try {
            // Get the authenticated user
            $user = auth()->user();
            if ($user->wallets()->count() == 0) {
                $user->createWallet([
                    'name' => 'USD',
                    'slug' => 'usd',
                    'decimal_places' => 2,
                    'meta' => [
                        'fullname' => 'US Dollar',
                        'symbol' => "$",
                        'precision' => 2,
                        'logo' => 'https://catamphetamine.github.io/country-flag-icons/3x2/US.svg',
                    ],
                ]);
            }

            // Get user's wallets
            $wallets = $user->wallets();

            // Return success response with wallets
            return get_success_response($wallets);
        } catch (\Throwable $th) {
            // Log error
            \Log::error($th);

            // Return error response
            return get_error_response(['error' => 'Unable to get wallets', "info" => $th->getMessage(), "trace" => $th->getTrace()]);
        }
    }

    /**
     * Add new wallet currency/balance for customer
     * @param Request $request
     * @return array
     */

    public function addNewWallet(Request $request)
    {
        try {
            $request->validate([
                'currency' => 'required|in:USD,EUR,GBP,CLP,PEN,ARS,MXN,COP,BRL',
            ]);

            $user = $request->user();

            // check if user already has wallet
            if ($user->hasWallet($request->currency)) {
                return get_error_response([
                    'error' => 'Wallet already exists',
                ]);
            }

            $currency = Currency::whereWallet($request->currency)->first();

            if (!$currency) {
                return get_error_response(['error' => 'Currency is currenctly unavailable, please contact support']);
            }

            $wallet = [
                'name' => $currency->wallet,
                'slug' => strtolower($currency->wallet),
                'decimal_places' => $currency->decimal_places ?? 2,
                'meta' => [
                    'fullname' => $currency->currency_name,
                    'symbol' => $currency->currency_icon,
                    'precision' => $currency->decimal_places ?? 2,
                    'logo' => $currency->logo_url ?? 'https://yativo.com/wp-content/uploads/2024/03/Yativo-42x43_090555.png',
                ],
            ];

            if ($user->createWallet($wallet)) {
                return get_success_response(['msg' => 'Wallet created successfully']);
            }
            return get_error_response(['error' => 'Unable to process request, please try again later']);
        } catch (\Throwable $th) {
            if(env('APP_ENV') == 'local') {
                return get_error_response(['error' => $th->getMessage()]);
            }
            return get_error_response(['error' => 'Something went wrong, please try again later']);
        }
    }

    /**
     * This method adds a new wallet currency/balance for a customer.
     *
     * @param Request $request - The incoming request
     * @return array - Returns a success or error response
     */

    public function deposits()
    {
        try {
            $deposits = Deposit::whereUserId(active_user())->with('transaction')->paginate(per_page());
            return paginate_yativo($deposits);
        } catch (\Throwable $th) {
            if(env('APP_ENV') == 'local') {
                return get_error_response(['error' => $th->getMessage()]);
            }
            return get_error_response(['error' => 'Something went wrong, please try again later']);
        }
    }

    /**
     * This controller contains methods for managing user wallets.
     *
     * The main methods are:
     *
     * - addWallet: Adds a new wallet currency for the user
     * - deposits: Gets a list of deposits for the user
     * - withdrawals: Gets a list of withdrawals for the user (moved to WithdrawalController)
     * - yativoTransfer: Transfers balance between two users
     * - getBalance: Gets the wallet balance for the user
     *
     * The methods handle validation, database queries, and background jobs for transactions.
     * Responses are returned using helper methods like get_success_response().
     * The code follows common Laravel conventions and patterns.
     * This method transfers balance between two users.
     *
     * @param Request $request - The incoming request
     * @return array - Returns a success or error response
     */
    public function yativoTransfer(Request $request)
    {
        try {
            $validate = $request->validate([
                'email' => 'required',
                'amount' => 'required',
                'currency' => 'required',
            ]);

            $user = $request->user();
            if (!$user->hasWallet($request->currency)) {
                return get_error_response(['error' => 'Wallet not found']);
            }

            if ($request->email == $user->email) {
                return get_error_response(['error' => "Sorry you can't transfer to yourself"]);
            }

            $receiver = User::whereEmail($request->email)->first();
            if (!$receiver) {
                return get_error_response(['error' => 'Invalid receiver provided']);
            }

            if (!$receiver->hasWallet($request->currency)) {
                return get_error_response(['error' => 'Wallet not found']);
            }

            // check sender balance
            $sender_balance = $user->getWallet($request->currency);
            if ($sender_balance->balance < $request->amount) {
                return get_error_response(['error' => 'Insufficient wallet balance']);
            }

            $receiver_balance = Balance::whereUserId($user->id)
                ->where('currency_symbol', $request->currency)
                ->first();
            $receiver_balance->balance = floatval($receiver_balance->balance + $request->amount);
            $receiver_balance->save();

            $validate['sender_id'] = $user->id;
            $validate['receiver_id'] = $receiver->id;
            $validate['user_id'] = $user->id;

            Withdraw::create($validate);
            JobsTransaction::dispatch($validate, 'yativo_transfer');

            $payouts = Deposit::whereUserId(active_user())->with('transaction')->get();
            return get_success_response($payouts);
        } catch (\Throwable $th) {
            if(env('APP_ENV') == 'local') {
                return get_error_response(['error' => $th->getMessage()]);
            }
            return get_error_response(['error' => 'Something went wrong, please try again later']);
        }
    }

    /**
     * Get the wallet balance for the current user.
     *
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function getBalance(Request $request)
    {
        try {
            // Get the authenticated user
            $user = auth()->user();
            // Check if user has any wallets
            if (!$user->hasWallet('usd') || !$user->getWallet('usd')) {
                // If not, create a default USD wallet
                $user->createWallet([
                    'name' => 'USD',
                    'slug' => 'usd',
                    'decimal_places' => 2,
                    'meta' => [
                        'fullname' => 'US Dollar',
                        'symbol' => "$",
                        'precision' => 2,
                        'logo' => 'https://catamphetamine.github.io/country-flag-icons/3x2/US.svg',
                    ],
                ]);
            }

            // Get user's wallets
            $wallets = $user->wallets();

            // Return success response with wallets
            return get_success_response($wallets);
        } catch (\Throwable $th) {
            // Log error
            \Log::error($th);

            // Return error response
            return get_error_response(['error' => 'Unable to get wallets']);
        }
    }
}

